// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace CydinBuildService.n127_0_0_1 {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="ServerSoap", Namespace="http://tempuri.org/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Server : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ConnectBuildServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisconnectBuildServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBuildServiceStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSourcesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReleasesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSourceStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSourceTagStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSourceTagsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPublishedOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSourceTagBuiltOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAppReleasesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSourceTagBuildDataOperationCompleted;
        
        public Server() {
            this.Url = "http://127.0.0.1:8080/WebService/Server.asmx";
        }
        
        public Server(string url) {
            this.Url = url;
        }
        
        public event ConnectBuildServiceCompletedEventHandler ConnectBuildServiceCompleted;
        
        public event GetSettingsCompletedEventHandler GetSettingsCompleted;
        
        public event DisconnectBuildServiceCompletedEventHandler DisconnectBuildServiceCompleted;
        
        public event SetBuildServiceStatusCompletedEventHandler SetBuildServiceStatusCompleted;
        
        public event LogCompletedEventHandler LogCompleted;
        
        public event GetSourcesCompletedEventHandler GetSourcesCompleted;
        
        public event GetReleasesCompletedEventHandler GetReleasesCompleted;
        
        public event SetSourceStatusCompletedEventHandler SetSourceStatusCompleted;
        
        public event SetSourceTagStatusCompletedEventHandler SetSourceTagStatusCompleted;
        
        public event UpdateSourceTagsCompletedEventHandler UpdateSourceTagsCompleted;
        
        public event SetPublishedCompletedEventHandler SetPublishedCompleted;
        
        public event SetSourceTagBuiltCompletedEventHandler SetSourceTagBuiltCompleted;
        
        public event GetAppReleasesCompletedEventHandler GetAppReleasesCompleted;
        
        public event SetSourceTagBuildDataCompletedEventHandler SetSourceTagBuildDataCompleted;
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConnectBuildService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public bool ConnectBuildService() {
            object[] results = this.Invoke("ConnectBuildService", new object[0]);
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginConnectBuildService(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConnectBuildService", new object[0], callback, asyncState);
        }
        
        public bool EndConnectBuildService(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void ConnectBuildServiceAsync() {
            this.ConnectBuildServiceAsync(null);
        }
        
        public void ConnectBuildServiceAsync(object userState) {
            if ((this.ConnectBuildServiceOperationCompleted == null)) {
                this.ConnectBuildServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectBuildServiceCompleted);
            }
            this.InvokeAsync("ConnectBuildService", new object[0], this.ConnectBuildServiceOperationCompleted, userState);
        }
        
        private void OnConnectBuildServiceCompleted(object arg) {
            if ((this.ConnectBuildServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConnectBuildServiceCompleted(this, new ConnectBuildServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSettings", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public SettingsInfo GetSettings() {
            object[] results = this.Invoke("GetSettings", new object[0]);
            return ((SettingsInfo)(results[0]));
        }
        
        public System.IAsyncResult BeginGetSettings(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSettings", new object[0], callback, asyncState);
        }
        
        public SettingsInfo EndGetSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SettingsInfo)(results[0]));
        }
        
        public void GetSettingsAsync() {
            this.GetSettingsAsync(null);
        }
        
        public void GetSettingsAsync(object userState) {
            if ((this.GetSettingsOperationCompleted == null)) {
                this.GetSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSettingsCompleted);
            }
            this.InvokeAsync("GetSettings", new object[0], this.GetSettingsOperationCompleted, userState);
        }
        
        private void OnGetSettingsCompleted(object arg) {
            if ((this.GetSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSettingsCompleted(this, new GetSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DisconnectBuildService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void DisconnectBuildService() {
            this.Invoke("DisconnectBuildService", new object[0]);
        }
        
        public System.IAsyncResult BeginDisconnectBuildService(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DisconnectBuildService", new object[0], callback, asyncState);
        }
        
        public void EndDisconnectBuildService(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void DisconnectBuildServiceAsync() {
            this.DisconnectBuildServiceAsync(null);
        }
        
        public void DisconnectBuildServiceAsync(object userState) {
            if ((this.DisconnectBuildServiceOperationCompleted == null)) {
                this.DisconnectBuildServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisconnectBuildServiceCompleted);
            }
            this.InvokeAsync("DisconnectBuildService", new object[0], this.DisconnectBuildServiceOperationCompleted, userState);
        }
        
        private void OnDisconnectBuildServiceCompleted(object arg) {
            if ((this.DisconnectBuildServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisconnectBuildServiceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetBuildServiceStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void SetBuildServiceStatus(string status) {
            this.Invoke("SetBuildServiceStatus", new object[] {
                        status});
        }
        
        public System.IAsyncResult BeginSetBuildServiceStatus(string status, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetBuildServiceStatus", new object[] {
                        status}, callback, asyncState);
        }
        
        public void EndSetBuildServiceStatus(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void SetBuildServiceStatusAsync(string status) {
            this.SetBuildServiceStatusAsync(status, null);
        }
        
        public void SetBuildServiceStatusAsync(string status, object userState) {
            if ((this.SetBuildServiceStatusOperationCompleted == null)) {
                this.SetBuildServiceStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBuildServiceStatusCompleted);
            }
            this.InvokeAsync("SetBuildServiceStatus", new object[] {
                        status}, this.SetBuildServiceStatusOperationCompleted, userState);
        }
        
        private void OnSetBuildServiceStatusCompleted(object arg) {
            if ((this.SetBuildServiceStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBuildServiceStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Log", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void Log(LogSeverity severity, string message) {
            this.Invoke("Log", new object[] {
                        severity,
                        message});
        }
        
        public System.IAsyncResult BeginLog(LogSeverity severity, string message, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Log", new object[] {
                        severity,
                        message}, callback, asyncState);
        }
        
        public void EndLog(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void LogAsync(LogSeverity severity, string message) {
            this.LogAsync(severity, message, null);
        }
        
        public void LogAsync(LogSeverity severity, string message, object userState) {
            if ((this.LogOperationCompleted == null)) {
                this.LogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogCompleted);
            }
            this.InvokeAsync("Log", new object[] {
                        severity,
                        message}, this.LogOperationCompleted, userState);
        }
        
        private void OnLogCompleted(object arg) {
            if ((this.LogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSources", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public SourceInfo[] GetSources(int appId) {
            object[] results = this.Invoke("GetSources", new object[] {
                        appId});
            return ((SourceInfo[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetSources(int appId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSources", new object[] {
                        appId}, callback, asyncState);
        }
        
        public SourceInfo[] EndGetSources(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SourceInfo[])(results[0]));
        }
        
        public void GetSourcesAsync(int appId) {
            this.GetSourcesAsync(appId, null);
        }
        
        public void GetSourcesAsync(int appId, object userState) {
            if ((this.GetSourcesOperationCompleted == null)) {
                this.GetSourcesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSourcesCompleted);
            }
            this.InvokeAsync("GetSources", new object[] {
                        appId}, this.GetSourcesOperationCompleted, userState);
        }
        
        private void OnGetSourcesCompleted(object arg) {
            if ((this.GetSourcesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSourcesCompleted(this, new GetSourcesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReleases", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public ReleaseInfo[] GetReleases(int appId) {
            object[] results = this.Invoke("GetReleases", new object[] {
                        appId});
            return ((ReleaseInfo[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetReleases(int appId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReleases", new object[] {
                        appId}, callback, asyncState);
        }
        
        public ReleaseInfo[] EndGetReleases(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReleaseInfo[])(results[0]));
        }
        
        public void GetReleasesAsync(int appId) {
            this.GetReleasesAsync(appId, null);
        }
        
        public void GetReleasesAsync(int appId, object userState) {
            if ((this.GetReleasesOperationCompleted == null)) {
                this.GetReleasesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReleasesCompleted);
            }
            this.InvokeAsync("GetReleases", new object[] {
                        appId}, this.GetReleasesOperationCompleted, userState);
        }
        
        private void OnGetReleasesCompleted(object arg) {
            if ((this.GetReleasesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReleasesCompleted(this, new GetReleasesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetSourceStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void SetSourceStatus(int appId, int sourceId, string status, string errorMessage) {
            this.Invoke("SetSourceStatus", new object[] {
                        appId,
                        sourceId,
                        status,
                        errorMessage});
        }
        
        public System.IAsyncResult BeginSetSourceStatus(int appId, int sourceId, string status, string errorMessage, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetSourceStatus", new object[] {
                        appId,
                        sourceId,
                        status,
                        errorMessage}, callback, asyncState);
        }
        
        public void EndSetSourceStatus(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void SetSourceStatusAsync(int appId, int sourceId, string status, string errorMessage) {
            this.SetSourceStatusAsync(appId, sourceId, status, errorMessage, null);
        }
        
        public void SetSourceStatusAsync(int appId, int sourceId, string status, string errorMessage, object userState) {
            if ((this.SetSourceStatusOperationCompleted == null)) {
                this.SetSourceStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSourceStatusCompleted);
            }
            this.InvokeAsync("SetSourceStatus", new object[] {
                        appId,
                        sourceId,
                        status,
                        errorMessage}, this.SetSourceStatusOperationCompleted, userState);
        }
        
        private void OnSetSourceStatusCompleted(object arg) {
            if ((this.SetSourceStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSourceStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetSourceTagStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void SetSourceTagStatus(int appId, int sourceId, string status) {
            this.Invoke("SetSourceTagStatus", new object[] {
                        appId,
                        sourceId,
                        status});
        }
        
        public System.IAsyncResult BeginSetSourceTagStatus(int appId, int sourceId, string status, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetSourceTagStatus", new object[] {
                        appId,
                        sourceId,
                        status}, callback, asyncState);
        }
        
        public void EndSetSourceTagStatus(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void SetSourceTagStatusAsync(int appId, int sourceId, string status) {
            this.SetSourceTagStatusAsync(appId, sourceId, status, null);
        }
        
        public void SetSourceTagStatusAsync(int appId, int sourceId, string status, object userState) {
            if ((this.SetSourceTagStatusOperationCompleted == null)) {
                this.SetSourceTagStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSourceTagStatusCompleted);
            }
            this.InvokeAsync("SetSourceTagStatus", new object[] {
                        appId,
                        sourceId,
                        status}, this.SetSourceTagStatusOperationCompleted, userState);
        }
        
        private void OnSetSourceTagStatusCompleted(object arg) {
            if ((this.SetSourceTagStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSourceTagStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSourceTags", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void UpdateSourceTags(int appId, int sourceId, System.DateTime fetchTime, SourceTagInfo[] sourceTags) {
            this.Invoke("UpdateSourceTags", new object[] {
                        appId,
                        sourceId,
                        fetchTime,
                        sourceTags});
        }
        
        public System.IAsyncResult BeginUpdateSourceTags(int appId, int sourceId, System.DateTime fetchTime, SourceTagInfo[] sourceTags, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateSourceTags", new object[] {
                        appId,
                        sourceId,
                        fetchTime,
                        sourceTags}, callback, asyncState);
        }
        
        public void EndUpdateSourceTags(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void UpdateSourceTagsAsync(int appId, int sourceId, System.DateTime fetchTime, SourceTagInfo[] sourceTags) {
            this.UpdateSourceTagsAsync(appId, sourceId, fetchTime, sourceTags, null);
        }
        
        public void UpdateSourceTagsAsync(int appId, int sourceId, System.DateTime fetchTime, SourceTagInfo[] sourceTags, object userState) {
            if ((this.UpdateSourceTagsOperationCompleted == null)) {
                this.UpdateSourceTagsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSourceTagsCompleted);
            }
            this.InvokeAsync("UpdateSourceTags", new object[] {
                        appId,
                        sourceId,
                        fetchTime,
                        sourceTags}, this.UpdateSourceTagsOperationCompleted, userState);
        }
        
        private void OnUpdateSourceTagsCompleted(object arg) {
            if ((this.UpdateSourceTagsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSourceTagsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetPublished", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void SetPublished(int appId, int releaseId) {
            this.Invoke("SetPublished", new object[] {
                        appId,
                        releaseId});
        }
        
        public System.IAsyncResult BeginSetPublished(int appId, int releaseId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetPublished", new object[] {
                        appId,
                        releaseId}, callback, asyncState);
        }
        
        public void EndSetPublished(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void SetPublishedAsync(int appId, int releaseId) {
            this.SetPublishedAsync(appId, releaseId, null);
        }
        
        public void SetPublishedAsync(int appId, int releaseId, object userState) {
            if ((this.SetPublishedOperationCompleted == null)) {
                this.SetPublishedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPublishedCompleted);
            }
            this.InvokeAsync("SetPublished", new object[] {
                        appId,
                        releaseId}, this.SetPublishedOperationCompleted, userState);
        }
        
        private void OnSetPublishedCompleted(object arg) {
            if ((this.SetPublishedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPublishedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetSourceTagBuilt", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void SetSourceTagBuilt(int appId, int sourceTagId) {
            this.Invoke("SetSourceTagBuilt", new object[] {
                        appId,
                        sourceTagId});
        }
        
        public System.IAsyncResult BeginSetSourceTagBuilt(int appId, int sourceTagId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetSourceTagBuilt", new object[] {
                        appId,
                        sourceTagId}, callback, asyncState);
        }
        
        public void EndSetSourceTagBuilt(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void SetSourceTagBuiltAsync(int appId, int sourceTagId) {
            this.SetSourceTagBuiltAsync(appId, sourceTagId, null);
        }
        
        public void SetSourceTagBuiltAsync(int appId, int sourceTagId, object userState) {
            if ((this.SetSourceTagBuiltOperationCompleted == null)) {
                this.SetSourceTagBuiltOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSourceTagBuiltCompleted);
            }
            this.InvokeAsync("SetSourceTagBuilt", new object[] {
                        appId,
                        sourceTagId}, this.SetSourceTagBuiltOperationCompleted, userState);
        }
        
        private void OnSetSourceTagBuiltCompleted(object arg) {
            if ((this.SetSourceTagBuiltCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSourceTagBuiltCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAppReleases", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public AppReleaseInfo[] GetAppReleases(int appId) {
            object[] results = this.Invoke("GetAppReleases", new object[] {
                        appId});
            return ((AppReleaseInfo[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetAppReleases(int appId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAppReleases", new object[] {
                        appId}, callback, asyncState);
        }
        
        public AppReleaseInfo[] EndGetAppReleases(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AppReleaseInfo[])(results[0]));
        }
        
        public void GetAppReleasesAsync(int appId) {
            this.GetAppReleasesAsync(appId, null);
        }
        
        public void GetAppReleasesAsync(int appId, object userState) {
            if ((this.GetAppReleasesOperationCompleted == null)) {
                this.GetAppReleasesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppReleasesCompleted);
            }
            this.InvokeAsync("GetAppReleases", new object[] {
                        appId}, this.GetAppReleasesOperationCompleted, userState);
        }
        
        private void OnGetAppReleasesCompleted(object arg) {
            if ((this.GetAppReleasesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppReleasesCompleted(this, new GetAppReleasesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetSourceTagBuildData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void SetSourceTagBuildData(int appId, int stagId, AddinData[] addins) {
            this.Invoke("SetSourceTagBuildData", new object[] {
                        appId,
                        stagId,
                        addins});
        }
        
        public System.IAsyncResult BeginSetSourceTagBuildData(int appId, int stagId, AddinData[] addins, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetSourceTagBuildData", new object[] {
                        appId,
                        stagId,
                        addins}, callback, asyncState);
        }
        
        public void EndSetSourceTagBuildData(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void SetSourceTagBuildDataAsync(int appId, int stagId, AddinData[] addins) {
            this.SetSourceTagBuildDataAsync(appId, stagId, addins, null);
        }
        
        public void SetSourceTagBuildDataAsync(int appId, int stagId, AddinData[] addins, object userState) {
            if ((this.SetSourceTagBuildDataOperationCompleted == null)) {
                this.SetSourceTagBuildDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSourceTagBuildDataCompleted);
            }
            this.InvokeAsync("SetSourceTagBuildData", new object[] {
                        appId,
                        stagId,
                        addins}, this.SetSourceTagBuildDataOperationCompleted, userState);
        }
        
        private void OnSetSourceTagBuildDataCompleted(object arg) {
            if ((this.SetSourceTagBuildDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSourceTagBuildDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SettingsInfo {
        
        /// <remarks/>
        public ApplicationInfo[] Applications;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ApplicationInfo {
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public int Id;
        
        /// <remarks/>
        public string Platforms;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum LogSeverity {
        
        /// <remarks/>
        Info,
        
        /// <remarks/>
        Warning,
        
        /// <remarks/>
        Error,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SourceInfo {
        
        /// <remarks/>
        public int Id;
        
        /// <remarks/>
        public string ProjectName;
        
        /// <remarks/>
        public string Type;
        
        /// <remarks/>
        public string Url;
        
        /// <remarks/>
        public string Tags;
        
        /// <remarks/>
        public string Branches;
        
        /// <remarks/>
        public SourceTagInfo[] SourceTags;
        
        /// <remarks/>
        public System.DateTime LastFetchTime;
        
        /// <remarks/>
        public bool AutoPublish;
        
        /// <remarks/>
        public string Directory;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SourceTagInfo {
        
        /// <remarks/>
        public int Id;
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public string LastRevision;
        
        /// <remarks/>
        public string Url;
        
        /// <remarks/>
        public string Status;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ReleaseInfo {
        
        /// <remarks/>
        public int Id;
        
        /// <remarks/>
        public string AddinId;
        
        /// <remarks/>
        public string Version;
        
        /// <remarks/>
        public string TargetAppVersion;
        
        /// <remarks/>
        public string[] Platforms;
        
        /// <remarks/>
        public string Status;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class AppReleaseInfo {
        
        /// <remarks/>
        public int Id;
        
        /// <remarks/>
        public string AppVersion;
        
        /// <remarks/>
        public string ZipUrl;
        
        /// <remarks/>
        public System.DateTime LastUpdateTime;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class AddinData {
        
        /// <remarks/>
        public string AddinVersion;
        
        /// <remarks/>
        public string AddinId;
        
        /// <remarks/>
        public string AppVersion;
        
        /// <remarks/>
        public string Platforms;
    }
    
    public partial class ConnectBuildServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConnectBuildServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void ConnectBuildServiceCompletedEventHandler(object sender, ConnectBuildServiceCompletedEventArgs args);
    
    public partial class GetSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SettingsInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SettingsInfo)(this.results[0]));
            }
        }
    }
    
    public delegate void GetSettingsCompletedEventHandler(object sender, GetSettingsCompletedEventArgs args);
    
    public delegate void DisconnectBuildServiceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public delegate void SetBuildServiceStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public delegate void LogCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public partial class GetSourcesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSourcesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SourceInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SourceInfo[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetSourcesCompletedEventHandler(object sender, GetSourcesCompletedEventArgs args);
    
    public partial class GetReleasesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReleasesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ReleaseInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReleaseInfo[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetReleasesCompletedEventHandler(object sender, GetReleasesCompletedEventArgs args);
    
    public delegate void SetSourceStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public delegate void SetSourceTagStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public delegate void UpdateSourceTagsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public delegate void SetPublishedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public delegate void SetSourceTagBuiltCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public partial class GetAppReleasesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAppReleasesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AppReleaseInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AppReleaseInfo[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetAppReleasesCompletedEventHandler(object sender, GetAppReleasesCompletedEventArgs args);
    
    public delegate void SetSourceTagBuildDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
}
